import json
import re
import urllib.parse
from datetime import datetime
from os.path import exists

from pywikibot import NoPage
from shared_utils.io.io import read, write
from telegram import Bot, ParseMode

from core.conf import conf
from libs.utils.wikibot import load_page, save_page

debug = False
bot = Bot(conf.telegram_token)
path = f'{conf.data_path}/word_of_day'


def send(message):
    bot.sendMessage(conf.main_group_id, message,
                    parse_mode=ParseMode.HTML, disable_web_page_preview=True)


def get_month_name(month):
    months = [
        u'',
        u'—è–Ω–≤–∞—Ä—è',
        u'—Ñ–µ–≤—Ä–∞–ª—è',
        u'–º–∞—Ä—Ç–∞',
        u'–∞–ø—Ä–µ–ª—è',
        u'–º–∞—è',
        u'–∏—é–Ω—è',
        u'–∏—é–ª—è',
        u'–∞–≤–≥—É—Å—Ç–∞',
        u'—Å–µ–Ω—Ç—è–±—Ä—è',
        u'–æ–∫—Ç—è–±—Ä—è',
        u'–Ω–æ—è–±—Ä—è',
        u'–¥–µ–∫–∞–±—Ä—è',
    ]
    return months[int(month)]


def get_title_link(title):
    title_url = urllib.parse.quote_plus(title)
    url = f'https://ru.wiktionary.org/wiki/{title_url}'
    return f'<a href="{url}">{title}</a>'


def process_words_of_days():
    current_year = datetime.now().year
    content = load_page('–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å:–°–ª–æ–≤–æ_–¥–Ω—è')
    content = \
        re.search('== –ö–∞–Ω–¥–∏–¥–∞—Ç—ã ==\n(.*?)\n== ', content, re.DOTALL).group(1)

    processed = False
    for title in re.findall('\[\[(–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å:–°–ª–æ–≤–æ –¥–Ω—è/[^]]+)]]', content):
        title = title.replace('{{#expr: - 1 + {{CURRENTYEAR}} }}',
                              f'{current_year - 1}')
        title = title.replace('{{#expr: + 1 + {{CURRENTYEAR}} }}',
                              f'{current_year + 1}')
        title = title.replace('{{CURRENTYEAR}}', f'{current_year}')
        print('@', title)
        if process_list(title):
            processed = True

    if processed:
        send('‚úîÔ∏è –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É')


def get_new_data(title):
    content = load_page(title, skip_absent=True)
    if not content:
        return {}
    data = {}
    for day, title in re.findall('\|\s*(\d+)\s*=\s*\[\[([^]]+)]]', content):
        print('*', day, '-', title)
        data[day] = title
    return data


def process_list(title):
    m = re.fullmatch('–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å:–°–ª–æ–≤–æ –¥–Ω—è/(\d\d)/(\d{4})', title)
    month, year = m.groups()

    new_data = get_new_data(title)
    new_content = json.dumps(new_data, indent=4, ensure_ascii=False)

    latest_path = f'{path}/{year}/{month}/latest.json'
    old_content = read(latest_path) if exists(latest_path) else '{}'
    old_data = json.loads(old_content)

    processed = False

    if old_content != new_content:
        title_url = urllib.parse.quote_plus(title)
        url = f'https://ru.wiktionary.org/w/index.php' \
              f'?title={title_url}&action=history'
        send(f'ü§ñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ <b>—Å–ª–æ–≤–∞–º–∏ –¥–Ω—è</b> –∑–∞ '
             f'<a href="{url}">{month}.{year}</a> '
             f'–±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')

        # save new version
        dt = datetime.now().strftime("%Y-%m-%d__%H-%M-%S")
        dtf = datetime.now().strftime("%Y-%m-%d")
        filename = f"{path}/{year}/{month}/{dtf}/{dt}.json"
        write(filename, new_content)

        if debug and month == '02':
            new_data = {
                "1": "—ç–∫—Ç–æ–≥–µ–Ω–µ–∑",
                "2": "–Ω–µ—ç—Ç–∏—á–Ω–æ—Å—Ç—å",
                "3": "–±–µ–ª—è—à–Ω–∞—è",
                "4": "–î–∞—É—Ä–∏—è",
                "5": "—Ñ–∞–≤–∏–ø–∏—Ä–∞–≤–∏—Ä",
                "6": "–ø—Ä–∏–≤–µ—Ç",  # changed
                "7": "–≥–ª–∞–≤–∫",
                "8": "–æ–∫—Å–Ω–∞—Ä",
                "9": "—Å–ø–µ–Ω—Å–µ—Ä",
                "10": "–º–µ–¥–Ω–∏—Ü–∫–∏–π",
                "11": "–ø—É—Ä–∂–∏—Ç—å",
                "12": "–Ω–µ—Å–ø—Ä–æ—Å—Ç–∞",
                # "13": "–∑–∞–∫–∞–≤—ã–∫–∞",  # removed
                "14": "–¥–µ—Ä—ë–≤–Ω—è",
                "15": "–Ω–µ–¥–µ–ª—å–Ω—ã–π",
                "16": "—Ç—É–∞–ª–µ—Ç–∫–∞",
                "17": "—Å–∫–∞–∂–µ–Ω–Ω—ã–π",
                "18": "–∫—Ä–∏–Ω–∂",
                "20": "–ø–æ–ª–µ–º–∏–∑–∏—Ä—É—é—â–∏–π",  # added
                "22": "—Å–ª–æ–≤–æ–ª–∏—Ç–Ω—è",
                "23": "–∫–∞–º—á–∞—Ç–Ω—ã–π",
                "24": "–≥—É–∞—à—å",
                "25": "–ü–æ—Ç–µ–±–Ω—è",
                "26": "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π",
                "27": "—Å–µ—Ä–µ–±—Ä—è–Ω–∏–∫"
            }

        # main function
        process_changes(old_data, new_data, month, year)
        processed = True

        # update latest version
        write(latest_path, new_content)

    return processed


def process_changes(old_data, new_data, month, year):
    processed = False
    month = int(month)
    month_name = get_month_name(month)
    date_suffix = f'{month_name} {year}'

    for day, old_title in old_data.items():
        if day not in new_data:
            old_link = get_title_link(old_title)
            send(f'üåÄ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞ <b>{day} {date_suffix}</b>:\n'
                 f'‚ûñ {old_link}')
            remove_template(old_title, day, month, year)
            processed = True

    for day, new_title in new_data.items():
        old_title = old_data.get(day)
        if old_title == new_title:
            content, template = prepare_template(new_title, day, month, year)
            link = get_title_link(new_title)
            if content and template not in content:
                send(f'‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –≤ {link}')
            continue
        new_link = get_title_link(new_title)
        if old_title:
            old_link = get_title_link(old_title)
            send(f'üåÄ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ <b>{day} {date_suffix}</b>:\n'
                 f'‚ûó {old_link} ‚Üí {new_link}')
            remove_template(old_title, day, month, year)
        else:
            send(f'üåÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞ <b>{day} {date_suffix}</b>:\n'
                 f'‚ûï {new_link}')
        add_template(new_title, day, month, year)
        processed = True

    if not processed:
        send('ü§∑üèª‚Äç‚ôÇÔ∏è –°—Ç—Ä–∞–Ω–Ω–æ, –ø–æ—Ö–æ–∂–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ')
    return processed


def prepare_template(title, day, month, year):
    try:
        content = load_page(title)
    except NoPage:
        link = get_title_link(title)
        send(f'‚õîÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {link}')
        return None, None
    template = '{{—Å–ª–æ–≤–æ –¥–Ω—è|' + f'{day}|{month}|{year}' + '}}'
    return content, template


def add_template(title, day, month, year):
    content, template = prepare_template(title, day, month, year)
    if not content:
        return
    link = get_title_link(title)
    if template in content:
        send(f'‚ùå <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ {link}')
        return
    if '{{—Å–ª–æ–≤–æ –¥–Ω—è|' in content:
        send(f'‚ùå <b>–û—à–∏–±–∫–∞:</b> –î—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω –≤ {link}')
        return
    content = f'{template}\n\n{content}'
    if not debug:
        save_page(title, content, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ {{—Å–ª–æ–≤–æ –¥–Ω—è}}')


def remove_template(title, day, month, year):
    content, template = prepare_template(title, day, month, year)
    if not content:
        return
    link = get_title_link(title)
    if template not in content:
        send(f'‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ –≤ {link}')
        return
    content = content.replace(f'{template}\n', '')
    content = content.replace(f'{template}', '')
    if not debug:
        save_page(title, content, '–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ {{—Å–ª–æ–≤–æ –¥–Ω—è}}')


if __name__ == '__main__':
    process_words_of_days()
